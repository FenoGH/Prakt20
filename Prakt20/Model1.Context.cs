//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Prakt20
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ДеталиEntities : DbContext
    {
        public ДеталиEntities()
            : base("name=ДеталиEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Накладная_на_поступление> Накладная_на_поступление { get; set; }
        public virtual DbSet<Склад> Склад { get; set; }
        public virtual DbSet<Справочник_цен> Справочник_цен { get; set; }
        public virtual DbSet<Требование_на_выдачу> Требование_на_выдачу { get; set; }
    
        public virtual int ДобавитьДеталь(string name, Nullable<int> price)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьДеталь", nameParameter, priceParameter);
        }
    
        public virtual int ОбновитьДеталь(string name, Nullable<int> price, Nullable<int> code)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ОбновитьДеталь", nameParameter, priceParameter, codeParameter);
        }
    
        public virtual int УдалитьДеталь(Nullable<int> iddetail)
        {
            var iddetailParameter = iddetail.HasValue ?
                new ObjectParameter("iddetail", iddetail) :
                new ObjectParameter("iddetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьДеталь", iddetailParameter);
        }
    
        public virtual ObjectResult<Задание2_Result> Задание2(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Задание2_Result>("Задание2", monthParameter);
        }
    
        public virtual int Количество(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Количество", monthParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Количество_Деталей_По_Месяцу(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Количество_Деталей_По_Месяцу", monthParameter);
        }
    
        public virtual ObjectResult<ТребованиеСтоимость_Result> ТребованиеСтоимость(Nullable<int> numtreb)
        {
            var numtrebParameter = numtreb.HasValue ?
                new ObjectParameter("numtreb", numtreb) :
                new ObjectParameter("numtreb", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ТребованиеСтоимость_Result>("ТребованиеСтоимость", numtrebParameter);
        }
    
        public virtual int Стоимость(Nullable<int> trebid)
        {
            var trebidParameter = trebid.HasValue ?
                new ObjectParameter("trebid", trebid) :
                new ObjectParameter("trebid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Стоимость", trebidParameter);
        }
    }
}
